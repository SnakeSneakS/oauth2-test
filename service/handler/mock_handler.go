// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Callback mocks base method.
func (m *MockHandler) Callback(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Callback", arg0)
}

// Callback indicates an expected call of Callback.
func (mr *MockHandlerMockRecorder) Callback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockHandler)(nil).Callback), arg0)
}

// Home mocks base method.
func (m *MockHandler) Home(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Home", arg0)
}

// Home indicates an expected call of Home.
func (mr *MockHandlerMockRecorder) Home(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Home", reflect.TypeOf((*MockHandler)(nil).Home), arg0)
}

// Login mocks base method.
func (m *MockHandler) Login(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", arg0)
}

// Login indicates an expected call of Login.
func (mr *MockHandlerMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockHandler)(nil).Login), arg0)
}

// Logout mocks base method.
func (m *MockHandler) Logout(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", arg0)
}

// Logout indicates an expected call of Logout.
func (mr *MockHandlerMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockHandler)(nil).Logout), arg0)
}

// User mocks base method.
func (m *MockHandler) User(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "User", arg0)
}

// User indicates an expected call of User.
func (mr *MockHandlerMockRecorder) User(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockHandler)(nil).User), arg0)
}
